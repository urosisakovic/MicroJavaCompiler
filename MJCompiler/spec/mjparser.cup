package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	private boolean errorDetected = false;
	private Symbol currSymbol = null;		
	private Symbol errorSymbol = null;
	
	private static Logger log = Logger.getLogger("info");
	private static Logger logError = Logger.getLogger("error");
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
			errorSymbol = (Symbol) info;
            msg.append(" na liniji ").append(errorSymbol.left);
			msg.append(", koloni ").append(errorSymbol.right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(errorSymbol.value.toString()).append("\"");
			}			
			msg.append("!");
		}
        logError.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
            msg.append(" na liniji ").append(((Symbol)info).left);
			msg.append(", koloni ").append(((Symbol)info).right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(((Symbol)info).value.toString()).append("\"");
			}
		}
        log.info(msg.toString());
    }
	
	public boolean isErrorDetected() {
		return errorDetected;
	}
    
	public Symbol getCurrSymbol() {
		return currSymbol;
	}
	
	public Symbol getErrorSymbol() {
		return errorSymbol;
	}
:}

scan with {:
	currSymbol = this.getScanner().next_token();
	if (currSymbol != null && currSymbol.value != null) {
		log.info(currSymbol.toString() + " " + currSymbol.value.toString());
	}
	return currSymbol;
:}

terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF;
terminal SWITCH, DO, WHILE, NEW, PRINT, READ, RETURN;
terminal VOID, EXTENDS, CONTINUE, CASE;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESSER, LESSER_EQUAL;
terminal AND, OR, ASSIGNMENT, INC, DEC, SEMICOLON, COMMA, FULL_STOP;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal QUESTION_MARK, COLON;

nonterminal ProgramDeclarations, ProgramDeclaration;
nonterminal ConstDecl, ConstList, ConstPart, ClassDecl;
nonterminal VarDecl, VarList, VarPart, VarDeclList;
nonterminal GlobalVarDecl, GlobalVarList, GlobalVarPart;
nonterminal MethodDeclList, MethodDec, MethodVoidDecl, MethodTypeDecl, MethVoidName, MethTypeName;
nonterminal FormParams, FormParam, StatementList, Statement, StatementIf, StatementIfBody, StatementWhileBody;
nonterminal CaseList, CasePart, DesignatorStatement, Assignment;
nonterminal ActPars, IfCondition, IfKw, DoKw;
nonterminal DesignatorName;
nonterminal Assignop, Relop, Addop, Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Value, Term, Factor, Expr, Expr1, TernaryCondition, TernaryExpr1, TernaryExpr2, Condition, CondTerm, CondFact;

precedence left ELSE;

Program ::= (Program) PROGRAM ProgName:p ProgramDeclarations LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

ProgramDeclarations ::= (ProgramDeclMulti) ProgramDeclarations ProgramDeclaration
						|
						(ProgramDeclEps) /* epsilon */;
						
ProgramDeclaration ::= (PartConstDeclaration) ConstDecl
					   |
					   (PartVarDeclaration) GlobalVarDecl
					   |
					   (PartClassDeclaration) ClassDecl;

ConstDecl ::= (ConstDeclaration) CONST Type ConstList SEMICOLON;

ConstList ::= (ConstMulti) ConstList COMMA ConstPart
			  |
			  (ConstSingle) ConstPart;
			  
ConstPart ::= (ConstPart) IDENT:constName ASSIGNMENT Value;

Value ::= (NumConst) NUM_CONST
		  |
		  (BoolConst) BOOL_CONST
		  |
		  (CharConst) CHAR_CONST;
				
VarDecl ::= (VarDeclaration) Type VarList SEMICOLON;

VarList ::= (VarMulti) VarList COMMA VarPart
			|
			(VarSingle) VarPart;
			
VarPart ::= (VarNormal) IDENT:varName
			|
			(VarArray) IDENT:varName LSQUARE RSQUARE;
			
GlobalVarDecl ::= (GlobalVarDeclaration) Type GlobalVarList SEMICOLON;

GlobalVarList ::= (GlobalVarMulti) GlobalVarList COMMA GlobalVarPart
				  |
				  (GlobalVarSingle) GlobalVarPart;
			
GlobalVarPart ::= (GlobalVar) VarPart 
				  |
				  (VarError) error {: parser.report_error("Oporavak od greske u deklaraciji globalne promenljive", parser.getErrorSymbol()); :};
				  /* A1 definicija globalne promenljive */ 

ClassDecl ::= (ClassDecl0) CLASS IDENT EXTENDS Type LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl1) CLASS IDENT LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl2) CLASS IDENT EXTENDS Type LBRACE VarDeclList RBRACE
			  |
			  (ClassDecl3) CLASS IDENT LBRACE VarDeclList RBRACE
			  |
			  (ClassDecl4) CLASS IDENT EXTENDS Type LBRACE LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl5) CLASS IDENT LBRACE LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl6) CLASS IDENT EXTENDS Type LBRACE RBRACE
			  |
			  (ClassDecl7) CLASS IDENT LBRACE RBRACE;
			  
VarDeclList ::= (VarDeclMulti) VarDeclList VarDecl
				|
				(VarDeclSingle) VarDecl;
				
MethodDeclList ::= (MethodDecMulti) MethodDeclList MethodDec
				   |
				   (MethodDeclSingle) MethodDec;
				   
MethodDec ::= (MethodVoidDeclaration) MethodVoidDecl
			  |
			  (MethodTypeDeclaration) MethodTypeDecl;

MethodVoidDecl ::= (MethodVoid0) MethVoidName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodVoid1) MethVoidName LPAREN FormParams RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodVoid2) MethVoidName LPAREN FormParams RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodVoid3) MethVoidName LPAREN FormParams RPAREN LBRACE RBRACE
				   |
				   (MethodVoid4) MethVoidName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodVoid5) MethVoidName LPAREN RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodVoid6) MethVoidName LPAREN RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodVoid7) MethVoidName LPAREN RPAREN LBRACE RBRACE;
				   
MethVoidName ::= (MethodVoidName) VOID IDENT:methodName;
				   
MethodTypeDecl ::= (MethodType0) MethTypeName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodType1) MethTypeName LPAREN FormParams RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodType2) MethTypeName LPAREN FormParams RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodType3) MethTypeName LPAREN FormParams RPAREN LBRACE RBRACE
				   |
				   (MethodType4) MethTypeName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   (MethodType5) MethTypeName LPAREN RPAREN VarDeclList LBRACE RBRACE
				   |
				   (MethodType6) MethTypeName LPAREN RPAREN LBRACE StatementList RBRACE
				   |
				   (MethodType7) MethTypeName LPAREN RPAREN LBRACE RBRACE;
		
MethTypeName ::= (MethodTypeName) Type IDENT:methodName;

FormParams ::= (ParamMulti) FormParams COMMA FormParam
			   |
			   (ParamSingle) FormParam;
			   
FormParam ::= (ParamNormal) Type IDENT:paramName
		      |
		      (ParamArray) Type IDENT:paramName LSQUARE RSQUARE
		      |
		      (ParamError) error 
		      {: this.parser.report_error("Oporavak od greske u definiciji formalnih parametara funkcije", this.parser.getErrorSymbol()); :};
		      /* B1 definicija formalnih parametara */
		      
Type ::= (Type) IDENT:typeName;				   

StatementList ::= (StatementMulti) StatementList Statement
				  |
				  (StatementSingle) Statement;
				  
Statement ::= (StmtDesign) DesignatorStatement SEMICOLON
			  |
			  (StmtSwitchNoCase) SWITCH LPAREN Expr RPAREN LBRACE RBRACE
			  |
			  (StmtSwitch) SWITCH LPAREN Expr RPAREN LBRACE CaseList RBRACE
			  |
			  (StmtBreak) BREAK SEMICOLON
			  |
			  (StmtContinue) CONTINUE SEMICOLON
			  |
			  (StmtReturnExpr) RETURN Expr:expr SEMICOLON
			  |
			  (StmtReturn) RETURN SEMICOLON
			  |
			  (StmtRead) READ LPAREN Designator RPAREN SEMICOLON
			  |
			  (StmtPrintNumConst) PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMICOLON
			  |
			  (StmtPrint) PRINT LPAREN Expr RPAREN SEMICOLON
			  |
			  (Stmt) LBRACE StatementList RBRACE			
			  |
			  (StmtIfElse) IfKw StatementIfBody ELSE Statement
			  |
			  (StmtIf) IfKw StatementIfBody
			  |
			  (StmtDoWhile) DoKw StatementWhileBody WHILE LPAREN Condition RPAREN SEMICOLON;
			  
IfKw ::= (IfKeyword) IF;
			  
DoKw ::= (DoKeyword) DO;
			  
StatementIfBody ::= (StmtIfBody) IfCondition Statement;

StatementWhileBody ::= (StmtWhileBody) Statement;

IfCondition ::= (IfCond) LPAREN Condition RPAREN
				|
				(IfCondError) LPAREN error RPAREN
                {: this.parser.report_error("Oporavak od greske u logickom izrazu if konstrukcije", this.parser.getErrorSymbol()); :};
				/* B2 greska logickog izraza unutar if konstrukcije */
				
CaseList ::= (CaseMulti) CaseList CasePart
			 |
			 (CaseSingle) CasePart;
			 
CasePart ::= (CasePart) CASE NUM_CONST COLON StatementList;

DesignatorStatement ::= (DesignatorAssignment) Designator Assignment
						|
						(DesignatorMethodCallParams) Designator LPAREN ActPars RPAREN
						|
						(DesignatorMethodCall) Designator LPAREN RPAREN
						|
						(DesignatorIncrement) Designator INC
						|
						(DesignatorDecrement) Designator DEC;
						
Assignment ::= (AssignmentExpr) ASSIGNMENT Expr
               |
               (AssignmentError) ASSIGNMENT error
               {: this.parser.report_error("Oporavak od greske u konstrukciji iskaza dodele", this.parser.getErrorSymbol()); :};
			   /* A2 konstrukcija iskaza dodele */
		 
ActPars ::= (ActParsMulti) ActPars COMMA Expr
			|
			(ActParsSingle) Expr;
			
Condition ::= (CondOr) Condition OR CondTerm
			  |
			  (CondSingle) CondTerm;
			  
CondTerm ::= (CondTermAnd) CondTerm AND CondFact
			 |
			 (CondTermSingle) CondFact;
			  			 			  
CondFact ::= (CondFactRelop) Expr Relop Expr
			 |
			 (CondFactSingle) Expr;
			 
Expr ::= (ExprTernary) TernaryCondition QUESTION_MARK TernaryExpr1 COLON TernaryExpr2
		 |
		 (ExprOne) Expr1;
		 
TernaryCondition ::= (TernaryCond) Expr1;

TernaryExpr1 ::= (TerExpr1) Expr1;

TernaryExpr2 ::= (TerExpr2) Expr1;
			 
Expr1 ::= (ExprNeg) MINUS Term
		  |
 		  (ExprAddop) Expr1 Addop Term
 		  |
 		  (ExprSingle) Term;
		 
Term ::= (TermMulop) Term Mulop Factor
		 |
		 (TermSingle) Factor;

Factor ::= (FuncCallParams) Designator:functionName LPAREN ActPars RPAREN
		   |
		   (FuncCall) Designator:functionName LPAREN RPAREN
		   |
		   (FactorDesignator) Designator
		   |
		   (FactorNumConst) NUM_CONST
		   | 
		   (FactorCharConst) CHAR_CONST
		   | 
		   (FactorBoolConst) BOOL_CONST
		   |
		   (FactorNew) NEW Type
		   |
		   (FactorNewArray) NEW Type LSQUARE Expr RSQUARE
		   | 
		   (FactorExpr) LPAREN Expr RPAREN;

Designator ::= (DesignatorArray) IDENT:designatorName LSQUARE Expr RSQUARE
			   |
			   (DesignatorSimple) IDENT:designatorName;
			   
Assignop ::= (Assignop) ASSIGNMENT;

Relop ::= (RelopEQ) EQUAL
		  |
		  (RelopNE) NOT_EQUAL
		  |
		  (RelopGT) GREATER
		  |
		  (RelopGE) GREATER_EQUAL
		  |
		  (RelopLT) LESSER
		  |
		  (RelopLE) LESSER_EQUAL;

Addop ::= (AddopPlus) PLUS 
		  | 
		  (AddopMinus) MINUS;

Mulop ::= (MulopMul) MUL 
		  | 
		  (MulopDiv) DIV 
		  | 
		  (MulopMod) MOD;
		   