package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Symbol currSymbol = null;		
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
     
    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
            msg.append (" na liniji ").append(((Symbol)info).left);
            msg.append (" na koloni ").append(((Symbol)info).right);
		}
        log.error(msg.toString());
        
        MJCompiler.getInstance().reportError(new CompilerError(
        	((Symbol)info).left,
        	msg.toString(),
        	CompilerError.CompilerErrorType.SYNTAX_ERROR));
    }
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
	
	public boolean isErrorDetected() {
		return errorDetected;
	}
    
	public Symbol getCurrentSymbol() {
		return currSymbol;
	}
:}

scan with {:
	currSymbol = this.getScanner().next_token();
	if (currSymbol != null && currSymbol.value != null) {
		log.info(currSymbol.toString() + " " + currSymbol.value.toString());
	}
	return currSymbol;
:}

/* Terminal keywords */
terminal PROGRAM,
	BREAK,
	CLASS,
	ENUM,
	ELSE, 
	CONST,
	IF,
	SWITCH,
	DO, 
	WHILE,
	NEW,
	PRINT,
	READ,
	RETURN,
	VOID,
	CONTINUE,
	CASE;

/* Terminal signs */
terminal PLUS,
	MINUS,
	MUL,
	DIV,
	MOD, 
	EQUAL,
	NOT_EQUAL,
	GREATER,
	GREATER_EQUAL,
	LESS,
	LESS_EQUAL,
	AND,
	OR,
	ASSIGNMENT,
	INC,
	DEC,
	SEMICOLON,
	COMMA,
	FULL_STOP,
	LPAREN,
	RPAREN,
	LSQUARE,
	RSQUARE,
	LBRACE,
	RBRACE,
	COLON;
 
/* Terminal literals */
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;

nonterminal ProgramDeclarations, ProgramDeclaration;
nonterminal ConstDecl, ConstList, ConstPart, ClassDecl;
nonterminal VarDecl, VarList, VarPart, VarDeclList;
nonterminal GlobalVarDecl, GlobalVarList, GlobalVarPart;
nonterminal MethodDeclList, MethodDec, MethodVoidDecl, MethodTypeDecl, MethVoidName, MethTypeName;
nonterminal FormParams, FormParam, StatementList, Statement, StatementIf, StatementIfBody, StatementWhileBody;
nonterminal CaseList, CasePart, DesignatorStatement, Assignment;
nonterminal ActPars, IfCondition, IfKw, DoKw;
nonterminal DesignatorName;
nonterminal Assignop, Relop, Addop, Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Value, Term, Factor, Expr, Condition, CondTerm, CondFact;

precedence left ELSE;

// Struktura programa na najvisem nivou
Program ::= (Program) PROGRAM ProgName:p ProgramDeclarations LBRACE MethodDeclList RBRACE;
ProgName ::= (ProgName) IDENT:progName;

// Programske deklaracije konstanti, klasa i promenljivih
ProgramDeclarations ::= (ProgramDeclMulti) ProgramDeclarations ProgramDeclaration
						|
						(ProgramDeclEps) /* epsilon */;
ProgramDeclaration ::= (PartConstDeclaration) ConstDecl
					   |
					   (PartVarDeclaration) GlobalVarDecl
					   |
					   (PartClassDeclaration) ClassDecl;

// Deklaracije konstanti
ConstDecl ::= (ConstDeclaration) CONST Type ConstList SEMICOLON;
ConstList ::= (ConstMulti) ConstList COMMA ConstPart
			  |
			  (ConstSingle) ConstPart;
ConstPart ::= (ConstPart) IDENT:constName ASSIGNMENT Value;
Value ::= (NumConst) NUM_CONST
		  |
		  (BoolConst) BOOL_CONST
		  |
		  (CharConst) CHAR_CONST;

// Deklaracija globalnih promenljivih	
GlobalVarDecl ::= (GlobalVarDeclaration) Type GlobalVarList SEMICOLON;
GlobalVarList ::= (GlobalVarMulti) GlobalVarList COMMA GlobalVarPart
				  |
				  (GlobalVarSingle) GlobalVarPart;
GlobalVarPart ::= (GlobalVar) VarPart 
				  |
				  (VarError) error {: :};
				  /* A1 definicija globalne promenljive */ 

// Deklaracija klasa
ClassDecl ::= (ClassDecl0) CLASS IDENT LBRACE VarDeclList LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl1) CLASS IDENT LBRACE VarDeclList RBRACE
			  |
			  (ClassDecl2) CLASS IDENT LBRACE LBRACE MethodDeclList RBRACE RBRACE
			  |
			  (ClassDecl3) CLASS IDENT LBRACE RBRACE;

// Deklaracija metoda
MethodDeclList ::= (MethodDecMulti) MethodDeclList MethodDec
				   |
				   (MethodDeclSingle) MethodDec;
MethodDec ::= (MethodVoidDeclaration) MethodVoidDecl
			  |
			  (MethodTypeDeclaration) MethodTypeDecl;
MethodVoidDecl ::= MethVoidName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   MethVoidName LPAREN FormParams RPAREN VarDeclList LBRACE RBRACE
				   |
				   MethVoidName LPAREN FormParams RPAREN LBRACE StatementList RBRACE
				   |
				   MethVoidName LPAREN FormParams RPAREN LBRACE RBRACE
				   |
				   MethVoidName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   MethVoidName LPAREN RPAREN VarDeclList LBRACE RBRACE
				   |
				   MethVoidName LPAREN RPAREN LBRACE StatementList RBRACE
				   |
				   MethVoidName LPAREN RPAREN LBRACE RBRACE;
MethVoidName ::= (MethodVoidName) VOID IDENT:methodName;

MethodTypeDecl ::= MethTypeName LPAREN FormParams RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   MethTypeName LPAREN FormParams RPAREN VarDeclList LBRACE RBRACE
				   |
				   MethTypeName LPAREN FormParams RPAREN LBRACE StatementList RBRACE
				   |
				   MethTypeName LPAREN FormParams RPAREN LBRACE RBRACE
				   |
				   MethTypeName LPAREN RPAREN VarDeclList LBRACE StatementList RBRACE
				   |
				   MethTypeName LPAREN RPAREN VarDeclList LBRACE RBRACE
				   |
				   MethTypeName LPAREN RPAREN LBRACE StatementList RBRACE
				   |
				   MethTypeName LPAREN RPAREN LBRACE RBRACE;
MethTypeName ::= (MethodTypeName) Type IDENT:methodName;

// Argumenti metoda
FormParams ::= (ParamMulti) FormParams COMMA FormParam
			   |
			   (ParamSingle) FormParam;
FormParam ::= (ParamNormal) Type IDENT:paramName
		      |
		      (ParamArray) Type IDENT:paramName LSQUARE RSQUARE
		      |
		      (ParamError) error 
		      {: this.parser.report_error("Oporavak od greske u definiciji formalnih parametara funkcije", this.parser.getCurrentSymbol()); :};
		      /* B1 definicija formalnih parametara */
Type ::= (Type) IDENT:typeName;

// Deklaracija lokalnih promenljivih
VarDecl ::= (VarDeclaration) Type VarList SEMICOLON;
VarList ::= (VarMulti) VarList COMMA VarPart
			|
			(VarSingle) VarPart;
VarPart ::= (VarNormal) IDENT:varName
			|
			(VarArray) IDENT:varName LSQUARE RSQUARE;
VarDeclList ::= (VarDeclMulti) VarDeclList VarDecl
				|
				(VarDeclSingle) VarDecl;

// Programski iskazi
StatementList ::= (StatementMulti) StatementList Statement
				  |
				  (StatementSingle) Statement;
Statement ::= (StmtDesign) DesignatorStatement SEMICOLON
			  |
			  (StmtSwitchNoCase) SWITCH LPAREN Expr RPAREN LBRACE RBRACE
			  |
			  (StmtSwitch) SWITCH LPAREN Expr RPAREN LBRACE CaseList RBRACE
			  |
			  (StmtBreak) BREAK SEMICOLON
			  |
			  (StmtContinue) CONTINUE SEMICOLON
			  |
			  (StmtReturnExpr) RETURN Expr:expr SEMICOLON
			  |
			  (StmtReturn) RETURN SEMICOLON
			  |
			  (StmtRead) READ LPAREN Designator RPAREN SEMICOLON
			  |
			  (StmtPrintNumConst) PRINT LPAREN Expr COMMA NUM_CONST RPAREN SEMICOLON
			  |
			  (StmtPrint) PRINT LPAREN Expr RPAREN SEMICOLON
			  |
			  (Stmt) LBRACE StatementList RBRACE			
			  |
			  (StmtIfElse) IfKw StatementIfBody ELSE Statement
			  |
			  (StmtIf) IfKw StatementIfBody
			  |
			  (StmtDoWhile) DoKw StatementWhileBody WHILE LPAREN Condition RPAREN SEMICOLON;
			  
IfKw ::= (IfKeyword) IF;
			  
DoKw ::= (DoKeyword) DO;
			  
StatementIfBody ::= (StmtIfBody) IfCondition Statement;

StatementWhileBody ::= (StmtWhileBody) Statement;

IfCondition ::= (IfCond) LPAREN Condition RPAREN
				|
				(IfCondError) LPAREN error RPAREN
                {: this.parser.report_error("Oporavak od greske u logickom izrazu if konstrukcije", this.parser.getCurrentSymbol()); :};
				/* B2 greska logickog izraza unutar if konstrukcije */
				
CaseList ::= (CaseMulti) CaseList CasePart
			 |
			 (CaseSingle) CasePart;
			 
CasePart ::= (CasePart) CASE NUM_CONST COLON StatementList;

DesignatorStatement ::= (DesignatorAssignment) Designator Assignment
						|
						(DesignatorMethodCallParams) Designator LPAREN ActPars RPAREN
						|
						(DesignatorMethodCall) Designator LPAREN RPAREN
						|
						(DesignatorIncrement) Designator INC
						|
						(DesignatorDecrement) Designator DEC;
						
Assignment ::= (AssignmentExpr) ASSIGNMENT Expr
               |
               (AssignmentError) ASSIGNMENT error
               {: this.parser.report_error("Oporavak od greske u konstrukciji iskaza dodele", this.parser.getCurrentSymbol()); :};
			   /* A2 konstrukcija iskaza dodele */
		 
ActPars ::= (ActParsMulti) ActPars COMMA Expr
			|
			(ActParsSingle) Expr;
			
Condition ::= (CondOr) Condition OR CondTerm
			  |
			  (CondSingle) CondTerm;
			  
CondTerm ::= (CondTermAnd) CondTerm AND CondFact
			 |
			 (CondTermSingle) CondFact;
			  			 			  
CondFact ::= (CondFactRelop) Expr Relop Expr
			 |
			 (CondFactSingle) Expr;
			 
Expr ::= (ExprNeg) MINUS Term
		  |
 		  (ExprAddop) Expr Addop Term
 		  |
 		  (ExprSingle) Term;
		 
Term ::= (TermMulop) Term Mulop Factor
		 |
		 (TermSingle) Factor;

Factor ::= (FuncCallParams) Designator:functionName LPAREN ActPars RPAREN
		   |
		   (FuncCall) Designator:functionName LPAREN RPAREN
		   |
		   (FactorDesignator) Designator
		   |
		   (FactorNumConst) NUM_CONST
		   | 
		   (FactorCharConst) CHAR_CONST
		   | 
		   (FactorBoolConst) BOOL_CONST
		   |
		   (FactorNew) NEW Type
		   |
		   (FactorNewArray) NEW Type LSQUARE Expr RSQUARE
		   | 
		   (FactorExpr) LPAREN Expr RPAREN;

Designator ::= (DesignatorArray) IDENT:designatorName LSQUARE Expr RSQUARE
			   |
			   (DesignatorSimple) IDENT:designatorName;
			   
			   
// Aritmeticke i logicke operacije   
Addop ::= (AddopPlus) PLUS 
		  | 
		  (AddopMinus) MINUS;

Mulop ::= (MulopMul) MUL 
		  | 
		  (MulopDiv) DIV 
		  | 
		  (MulopMod) MOD;
		  
Assignop ::= (Assignop) ASSIGNMENT;

Relop ::= (RelopEQ) EQUAL
		  |
		  (RelopNE) NOT_EQUAL
		  |
		  (RelopGT) GREATER
		  |
		  (RelopGE) GREATER_EQUAL
		  |
		  (RelopLT) LESS
		  |
		  (RelopLE) LESS_EQUAL;
		   