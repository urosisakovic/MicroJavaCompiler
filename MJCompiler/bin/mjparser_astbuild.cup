package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	private boolean errorDetected = false;
	private Symbol currSymbol = null;		
	private Symbol errorSymbol = null;
	
	private static Logger log = Logger.getLogger("info");
	private static Logger logError = Logger.getLogger("error");
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {			
			errorSymbol = (Symbol) info;
            msg.append(" na liniji ").append(errorSymbol.left);
			msg.append(", koloni ").append(errorSymbol.right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(errorSymbol.value.toString()).append("\"");
			}			
			msg.append("!");
		}
        logError.error(msg.toString());
        
        System.out.println("-----------------------------------Tokom prijavljivanja greske--------------------------------------");
        MJCompiler.getInstance().reportError(new CompilerError(
        	errorSymbol.left,
        	msg.toString(),
        	CompilerError.CompilerErrorType.SYNTAX_ERROR));
    }
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol) {
            msg.append(" na liniji ").append(((Symbol)info).left);
			msg.append(", koloni ").append(((Symbol)info).right);
			if (errorSymbol.value != null) {
				msg.append(" za simbol \"").append(((Symbol)info).value.toString()).append("\"");
			}
		}
        log.info(msg.toString());
    }
	
	public boolean isErrorDetected() {
		return errorDetected;
	}
    
	public Symbol getCurrSymbol() {
		return currSymbol;
	}
	
	public Symbol getErrorSymbol() {
		return errorSymbol;
	}
:}

scan with {:
	currSymbol = this.getScanner().next_token();
	if (currSymbol != null && currSymbol.value != null) {
		log.info(currSymbol.toString() + " " + currSymbol.value.toString());
	}
	return currSymbol;
:}

terminal PROGRAM, BREAK, CLASS, ENUM, ELSE, CONST, IF;
terminal SWITCH, DO, WHILE, NEW, PRINT, READ, RETURN;
terminal VOID, CONTINUE, CASE;
terminal String IDENT;
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUAL, NOT_EQUAL, GREATER, GREATER_EQUAL, LESS, LESS_EQUAL;
terminal AND, OR, ASSIGNMENT, INC, DEC, SEMICOLON, COMMA, FULL_STOP;
terminal LPAREN, RPAREN, LSQUARE, RSQUARE, LBRACE, RBRACE;
terminal COLON;

nonterminal ProgramDeclarations ProgramDeclarations;
nonterminal ProgramDeclaration ProgramDeclaration;
nonterminal ConstDecl ConstDecl;
nonterminal ConstList ConstList;
nonterminal ConstPart ConstPart;
nonterminal ClassDecl ClassDecl;
nonterminal VarDecl VarDecl;
nonterminal VarList VarList;
nonterminal VarPart VarPart;
nonterminal VarDeclList VarDeclList;
nonterminal GlobalVarDecl GlobalVarDecl;
nonterminal GlobalVarList GlobalVarList;
nonterminal GlobalVarPart GlobalVarPart;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDec MethodDec;
nonterminal MethodVoidDecl MethodVoidDecl;
nonterminal MethodTypeDecl MethodTypeDecl;
nonterminal MethVoidName MethVoidName;
nonterminal MethTypeName MethTypeName;
nonterminal FormParams FormParams;
nonterminal FormParam FormParam;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal StatementIf StatementIf;
nonterminal StatementIfBody StatementIfBody;
nonterminal StatementWhileBody StatementWhileBody;
nonterminal CaseList CaseList;
nonterminal CasePart CasePart;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Assignment Assignment;
nonterminal ActPars ActPars;
nonterminal IfCondition IfCondition;
nonterminal IfKw IfKw;
nonterminal DoKw DoKw;
nonterminal DesignatorName DesignatorName;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Value, Term, Factor, Expr, Condition, CondTerm, CondFact;

precedence left ELSE;

// Struktura programa na najvisem nivou
Program ::= (Program) PROGRAM ProgName:p ProgramDeclarations:P1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, P1, M2); RESULT.setLine(pleft); :};
ProgName ::= (ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

// Programske deklaracije konstanti, klasa i promenljivih
ProgramDeclarations ::= (ProgramDeclMulti) ProgramDeclarations:P1 ProgramDeclaration:P2 {: RESULT=new ProgramDeclMulti(P1, P2); RESULT.setLine(P1left); :}
						|
						(ProgramDeclEps) {: RESULT=new ProgramDeclEps(); :} /* epsilon */;
ProgramDeclaration ::= (PartConstDeclaration) ConstDecl:C1 {: RESULT=new PartConstDeclaration(C1); RESULT.setLine(C1left); :}
					   |
					   (PartVarDeclaration) GlobalVarDecl:G1 {: RESULT=new PartVarDeclaration(G1); RESULT.setLine(G1left); :}
					   |
					   (PartClassDeclaration) ClassDecl:C1 {: RESULT=new PartClassDeclaration(C1); RESULT.setLine(C1left); :};

// Deklaracije konstanti
ConstDecl ::= (ConstDeclaration) CONST Type:T1 ConstList:C2 SEMICOLON {: RESULT=new ConstDeclaration(T1, C2); RESULT.setLine(T1left); :};
ConstList ::= (ConstMulti) ConstList:C1 COMMA ConstPart:C2 {: RESULT=new ConstMulti(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (ConstSingle) ConstPart:C1 {: RESULT=new ConstSingle(C1); RESULT.setLine(C1left); :};
ConstPart ::= (ConstPart) IDENT:constName ASSIGNMENT Value:V1 {: RESULT=new ConstPart(constName, V1); RESULT.setLine(constNameleft); :};
Value ::= (NumConst) NUM_CONST:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
		  |
		  (BoolConst) BOOL_CONST:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :}
		  |
		  (CharConst) CHAR_CONST:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :};

// Deklaracija globalnih promenljivih	
GlobalVarDecl ::= (GlobalVarDeclaration) Type:T1 GlobalVarList:G2 SEMICOLON {: RESULT=new GlobalVarDeclaration(T1, G2); RESULT.setLine(T1left); :};
GlobalVarList ::= (GlobalVarMulti) GlobalVarList:G1 COMMA GlobalVarPart:G2 {: RESULT=new GlobalVarMulti(G1, G2); RESULT.setLine(G1left); :}
				  |
				  (GlobalVarSingle) GlobalVarPart:G1 {: RESULT=new GlobalVarSingle(G1); RESULT.setLine(G1left); :};
GlobalVarPart ::= (GlobalVar) VarPart:V1 {: RESULT=new GlobalVar(V1); RESULT.setLine(V1left); :} 
				  |
				  (VarError) error {: parser.report_error("Oporavak od greske u deklaraciji globalne promenljive", parser.getErrorSymbol()); :} {: RESULT=new VarError(); :};
				  /* A1 definicija globalne promenljive */ 

// Deklaracija klasa
ClassDecl ::= (ClassDecl0) CLASS IDENT:I1 LBRACE VarDeclList:V2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new ClassDecl0(I1, V2, M3); RESULT.setLine(I1left); :}
			  |
			  (ClassDecl1) CLASS IDENT:I1 LBRACE VarDeclList:V2 RBRACE {: RESULT=new ClassDecl1(I1, V2); RESULT.setLine(I1left); :}
			  |
			  (ClassDecl2) CLASS IDENT:I1 LBRACE LBRACE MethodDeclList:M2 RBRACE RBRACE {: RESULT=new ClassDecl2(I1, M2); RESULT.setLine(I1left); :}
			  |
			  (ClassDecl3) CLASS IDENT:I1 LBRACE RBRACE {: RESULT=new ClassDecl3(I1); RESULT.setLine(I1left); :};

// Deklaracija metoda
MethodDeclList ::= (MethodDecMulti) MethodDeclList:M1 MethodDec:M2 {: RESULT=new MethodDecMulti(M1, M2); RESULT.setLine(M1left); :}
				   |
				   (MethodDeclSingle) MethodDec:M1 {: RESULT=new MethodDeclSingle(M1); RESULT.setLine(M1left); :};
MethodDec ::= (MethodVoidDeclaration) MethodVoidDecl:M1 {: RESULT=new MethodVoidDeclaration(M1); RESULT.setLine(M1left); :}
			  |
			  (MethodTypeDeclaration) MethodTypeDecl:M1 {: RESULT=new MethodTypeDeclaration(M1); RESULT.setLine(M1left); :};
MethodVoidDecl ::= (MethodVoid0) MethVoidName:M1 LPAREN FormParams:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodVoid0(M1, F2, V3, S4); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid1) MethVoidName:M1 LPAREN FormParams:F2 RPAREN VarDeclList:V3 LBRACE RBRACE {: RESULT=new MethodVoid1(M1, F2, V3); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid2) MethVoidName:M1 LPAREN FormParams:F2 RPAREN LBRACE StatementList:S3 RBRACE {: RESULT=new MethodVoid2(M1, F2, S3); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid3) MethVoidName:M1 LPAREN FormParams:F2 RPAREN LBRACE RBRACE {: RESULT=new MethodVoid3(M1, F2); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid4) MethVoidName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodVoid4(M1, V2, S3); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid5) MethVoidName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE RBRACE {: RESULT=new MethodVoid5(M1, V2); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid6) MethVoidName:M1 LPAREN RPAREN LBRACE StatementList:S2 RBRACE {: RESULT=new MethodVoid6(M1, S2); RESULT.setLine(M1left); :}
				   |
				   (MethodVoid7) MethVoidName:M1 LPAREN RPAREN LBRACE RBRACE {: RESULT=new MethodVoid7(M1); RESULT.setLine(M1left); :};
MethVoidName ::= (MethodVoidName) VOID IDENT:methodName {: RESULT=new MethodVoidName(methodName); RESULT.setLine(methodNameleft); :};
MethodTypeDecl ::= (MethodType0) MethTypeName:M1 LPAREN FormParams:F2 RPAREN VarDeclList:V3 LBRACE StatementList:S4 RBRACE {: RESULT=new MethodType0(M1, F2, V3, S4); RESULT.setLine(M1left); :}
				   |
				   (MethodType1) MethTypeName:M1 LPAREN FormParams:F2 RPAREN VarDeclList:V3 LBRACE RBRACE {: RESULT=new MethodType1(M1, F2, V3); RESULT.setLine(M1left); :}
				   |
				   (MethodType2) MethTypeName:M1 LPAREN FormParams:F2 RPAREN LBRACE StatementList:S3 RBRACE {: RESULT=new MethodType2(M1, F2, S3); RESULT.setLine(M1left); :}
				   |
				   (MethodType3) MethTypeName:M1 LPAREN FormParams:F2 RPAREN LBRACE RBRACE {: RESULT=new MethodType3(M1, F2); RESULT.setLine(M1left); :}
				   |
				   (MethodType4) MethTypeName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodType4(M1, V2, S3); RESULT.setLine(M1left); :}
				   |
				   (MethodType5) MethTypeName:M1 LPAREN RPAREN VarDeclList:V2 LBRACE RBRACE {: RESULT=new MethodType5(M1, V2); RESULT.setLine(M1left); :}
				   |
				   (MethodType6) MethTypeName:M1 LPAREN RPAREN LBRACE StatementList:S2 RBRACE {: RESULT=new MethodType6(M1, S2); RESULT.setLine(M1left); :}
				   |
				   (MethodType7) MethTypeName:M1 LPAREN RPAREN LBRACE RBRACE {: RESULT=new MethodType7(M1); RESULT.setLine(M1left); :};
MethTypeName ::= (MethodTypeName) Type:T1 IDENT:methodName {: RESULT=new MethodTypeName(T1, methodName); RESULT.setLine(T1left); :};

// Argumenti metoda
FormParams ::= (ParamMulti) FormParams:F1 COMMA FormParam:F2 {: RESULT=new ParamMulti(F1, F2); RESULT.setLine(F1left); :}
			   |
			   (ParamSingle) FormParam:F1 {: RESULT=new ParamSingle(F1); RESULT.setLine(F1left); :};
FormParam ::= (ParamNormal) Type:T1 IDENT:paramName {: RESULT=new ParamNormal(T1, paramName); RESULT.setLine(T1left); :}
		      |
		      (ParamArray) Type:T1 IDENT:paramName LSQUARE RSQUARE {: RESULT=new ParamArray(T1, paramName); RESULT.setLine(T1left); :}
		      |
		      (ParamError) error 
		      {: this.parser.report_error("Oporavak od greske u definiciji formalnih parametara funkcije", this.parser.getErrorSymbol()); :} {: RESULT=new ParamError(); :};
		      /* B1 definicija formalnih parametara */
Type ::= (Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

// Deklaracija lokalnih promenljivih
VarDecl ::= (VarDeclaration) Type:T1 VarList:V2 SEMICOLON {: RESULT=new VarDeclaration(T1, V2); RESULT.setLine(T1left); :};
VarList ::= (VarMulti) VarList:V1 COMMA VarPart:V2 {: RESULT=new VarMulti(V1, V2); RESULT.setLine(V1left); :}
			|
			(VarSingle) VarPart:V1 {: RESULT=new VarSingle(V1); RESULT.setLine(V1left); :};
VarPart ::= (VarNormal) IDENT:varName {: RESULT=new VarNormal(varName); RESULT.setLine(varNameleft); :}
			|
			(VarArray) IDENT:varName LSQUARE RSQUARE {: RESULT=new VarArray(varName); RESULT.setLine(varNameleft); :};
VarDeclList ::= (VarDeclMulti) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclMulti(V1, V2); RESULT.setLine(V1left); :}
				|
				(VarDeclSingle) VarDecl:V1 {: RESULT=new VarDeclSingle(V1); RESULT.setLine(V1left); :};

// Programski iskazi
StatementList ::= (StatementMulti) StatementList:S1 Statement:S2 {: RESULT=new StatementMulti(S1, S2); RESULT.setLine(S1left); :}
				  |
				  (StatementSingle) Statement:S1 {: RESULT=new StatementSingle(S1); RESULT.setLine(S1left); :};
Statement ::= (StmtDesign) DesignatorStatement:D1 SEMICOLON {: RESULT=new StmtDesign(D1); RESULT.setLine(D1left); :}
			  |
			  (StmtSwitchNoCase) SWITCH LPAREN Expr:E1 RPAREN LBRACE RBRACE {: RESULT=new StmtSwitchNoCase(E1); RESULT.setLine(E1left); :}
			  |
			  (StmtSwitch) SWITCH LPAREN Expr:E1 RPAREN LBRACE CaseList:C2 RBRACE {: RESULT=new StmtSwitch(E1, C2); RESULT.setLine(E1left); :}
			  |
			  (StmtBreak) BREAK SEMICOLON {: RESULT=new StmtBreak(); :}
			  |
			  (StmtContinue) CONTINUE SEMICOLON {: RESULT=new StmtContinue(); :}
			  |
			  (StmtReturnExpr) RETURN Expr:expr SEMICOLON {: RESULT=new StmtReturnExpr(expr); RESULT.setLine(exprleft); :}
			  |
			  (StmtReturn) RETURN SEMICOLON {: RESULT=new StmtReturn(); :}
			  |
			  (StmtRead) READ LPAREN Designator:D1 RPAREN SEMICOLON {: RESULT=new StmtRead(D1); RESULT.setLine(D1left); :}
			  |
			  (StmtPrintNumConst) PRINT LPAREN Expr:E1 COMMA NUM_CONST:N2 RPAREN SEMICOLON {: RESULT=new StmtPrintNumConst(E1, N2); RESULT.setLine(E1left); :}
			  |
			  (StmtPrint) PRINT LPAREN Expr:E1 RPAREN SEMICOLON {: RESULT=new StmtPrint(E1); RESULT.setLine(E1left); :}
			  |
			  (Stmt) LBRACE StatementList:S1 RBRACE {: RESULT=new Stmt(S1); RESULT.setLine(S1left); :}			
			  |
			  (StmtIfElse) IfKw:I1 StatementIfBody:S2 ELSE Statement:S3 {: RESULT=new StmtIfElse(I1, S2, S3); RESULT.setLine(I1left); :}
			  |
			  (StmtIf) IfKw:I1 StatementIfBody:S2 {: RESULT=new StmtIf(I1, S2); RESULT.setLine(I1left); :}
			  |
			  (StmtDoWhile) DoKw:D1 StatementWhileBody:S2 WHILE LPAREN Condition:C3 RPAREN SEMICOLON {: RESULT=new StmtDoWhile(D1, S2, C3); RESULT.setLine(D1left); :};
			  
IfKw ::= (IfKeyword) IF {: RESULT=new IfKeyword(); :};
			  
DoKw ::= (DoKeyword) DO {: RESULT=new DoKeyword(); :};
			  
StatementIfBody ::= (StmtIfBody) IfCondition:I1 Statement:S2 {: RESULT=new StmtIfBody(I1, S2); RESULT.setLine(I1left); :};

StatementWhileBody ::= (StmtWhileBody) Statement:S1 {: RESULT=new StmtWhileBody(S1); RESULT.setLine(S1left); :};

IfCondition ::= (IfCond) LPAREN Condition:C1 RPAREN {: RESULT=new IfCond(C1); RESULT.setLine(C1left); :}
				|
				(IfCondError) LPAREN error RPAREN
                {: this.parser.report_error("Oporavak od greske u logickom izrazu if konstrukcije", this.parser.getErrorSymbol()); :} {: RESULT=new IfCondError(); :};
				/* B2 greska logickog izraza unutar if konstrukcije */
				
CaseList ::= (CaseMulti) CaseList:C1 CasePart:C2 {: RESULT=new CaseMulti(C1, C2); RESULT.setLine(C1left); :}
			 |
			 (CaseSingle) CasePart:C1 {: RESULT=new CaseSingle(C1); RESULT.setLine(C1left); :};
			 
CasePart ::= (CasePart) CASE NUM_CONST:N1 COLON StatementList:S2 {: RESULT=new CasePart(N1, S2); RESULT.setLine(N1left); :};

DesignatorStatement ::= (DesignatorAssignment) Designator:D1 Assignment:A2 {: RESULT=new DesignatorAssignment(D1, A2); RESULT.setLine(D1left); :}
						|
						(DesignatorMethodCallParams) Designator:D1 LPAREN ActPars:A2 RPAREN {: RESULT=new DesignatorMethodCallParams(D1, A2); RESULT.setLine(D1left); :}
						|
						(DesignatorMethodCall) Designator:D1 LPAREN RPAREN {: RESULT=new DesignatorMethodCall(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorIncrement) Designator:D1 INC {: RESULT=new DesignatorIncrement(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorDecrement) Designator:D1 DEC {: RESULT=new DesignatorDecrement(D1); RESULT.setLine(D1left); :};
						
Assignment ::= (AssignmentExpr) ASSIGNMENT Expr:E1 {: RESULT=new AssignmentExpr(E1); RESULT.setLine(E1left); :}
               |
               (AssignmentError) ASSIGNMENT error
               {: this.parser.report_error("Oporavak od greske u konstrukciji iskaza dodele", this.parser.getErrorSymbol()); :} {: RESULT=new AssignmentError(); :};
			   /* A2 konstrukcija iskaza dodele */
		 
ActPars ::= (ActParsMulti) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParsMulti(A1, E2); RESULT.setLine(A1left); :}
			|
			(ActParsSingle) Expr:E1 {: RESULT=new ActParsSingle(E1); RESULT.setLine(E1left); :};
			
Condition ::= (CondOr) Condition:C1 OR CondTerm:C2 {: RESULT=new CondOr(C1, C2); RESULT.setLine(C1left); :}
			  |
			  (CondSingle) CondTerm:C1 {: RESULT=new CondSingle(C1); RESULT.setLine(C1left); :};
			  
CondTerm ::= (CondTermAnd) CondTerm:C1 AND CondFact:C2 {: RESULT=new CondTermAnd(C1, C2); RESULT.setLine(C1left); :}
			 |
			 (CondTermSingle) CondFact:C1 {: RESULT=new CondTermSingle(C1); RESULT.setLine(C1left); :};
			  			 			  
CondFact ::= (CondFactRelop) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new CondFactRelop(E1, R2, E3); RESULT.setLine(E1left); :}
			 |
			 (CondFactSingle) Expr:E1 {: RESULT=new CondFactSingle(E1); RESULT.setLine(E1left); :};
			 
Expr ::= (ExprNeg) MINUS Term:T1 {: RESULT=new ExprNeg(T1); RESULT.setLine(T1left); :}
		  |
 		  (ExprAddop) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAddop(E1, A2, T3); RESULT.setLine(E1left); :}
 		  |
 		  (ExprSingle) Term:T1 {: RESULT=new ExprSingle(T1); RESULT.setLine(T1left); :};
		 
Term ::= (TermMulop) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new TermMulop(T1, M2, F3); RESULT.setLine(T1left); :}
		 |
		 (TermSingle) Factor:F1 {: RESULT=new TermSingle(F1); RESULT.setLine(F1left); :};

Factor ::= (FuncCallParams) Designator:functionName LPAREN ActPars:A1 RPAREN {: RESULT=new FuncCallParams(functionName, A1); RESULT.setLine(functionNameleft); :}
		   |
		   (FuncCall) Designator:functionName LPAREN RPAREN {: RESULT=new FuncCall(functionName); RESULT.setLine(functionNameleft); :}
		   |
		   (FactorDesignator) Designator:D1 {: RESULT=new FactorDesignator(D1); RESULT.setLine(D1left); :}
		   |
		   (FactorNumConst) NUM_CONST:N1 {: RESULT=new FactorNumConst(N1); RESULT.setLine(N1left); :}
		   | 
		   (FactorCharConst) CHAR_CONST:C1 {: RESULT=new FactorCharConst(C1); RESULT.setLine(C1left); :}
		   | 
		   (FactorBoolConst) BOOL_CONST:B1 {: RESULT=new FactorBoolConst(B1); RESULT.setLine(B1left); :}
		   |
		   (FactorNew) NEW Type:T1 {: RESULT=new FactorNew(T1); RESULT.setLine(T1left); :}
		   |
		   (FactorNewArray) NEW Type:T1 LSQUARE Expr:E2 RSQUARE {: RESULT=new FactorNewArray(T1, E2); RESULT.setLine(T1left); :}
		   | 
		   (FactorExpr) LPAREN Expr:E1 RPAREN {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :};

Designator ::= (DesignatorArray) IDENT:designatorName LSQUARE Expr:E1 RSQUARE {: RESULT=new DesignatorArray(designatorName, E1); RESULT.setLine(designatorNameleft); :}
			   |
			   (DesignatorSimple) IDENT:designatorName {: RESULT=new DesignatorSimple(designatorName); RESULT.setLine(designatorNameleft); :};
			   
			   
// Aritmeticke i logicke operacije   
Addop ::= (AddopPlus) PLUS {: RESULT=new AddopPlus(); :} 
		  | 
		  (AddopMinus) MINUS {: RESULT=new AddopMinus(); :};

Mulop ::= (MulopMul) MUL {: RESULT=new MulopMul(); :} 
		  | 
		  (MulopDiv) DIV {: RESULT=new MulopDiv(); :} 
		  | 
		  (MulopMod) MOD {: RESULT=new MulopMod(); :};
		  
Assignop ::= (Assignop) ASSIGNMENT {: RESULT=new Assignop(); :};

Relop ::= (RelopEQ) EQUAL {: RESULT=new RelopEQ(); :}
		  |
		  (RelopNE) NOT_EQUAL {: RESULT=new RelopNE(); :}
		  |
		  (RelopGT) GREATER {: RESULT=new RelopGT(); :}
		  |
		  (RelopGE) GREATER_EQUAL {: RESULT=new RelopGE(); :}
		  |
		  (RelopLT) LESS {: RESULT=new RelopLT(); :}
		  |
		  (RelopLE) LESS_EQUAL {: RESULT=new RelopLE(); :};
		   